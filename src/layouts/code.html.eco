---
layout: framed
---

<div style="position:fixed;top:0;left:0;right:0;bottom:0;">

<div id="instructions" class="carousel slide" data-interval="false">
  <div class="carousel-inner">
    <div class="item active">
      <div class="instruction container-margins">
        <h2><%= @document.title %> <small><%= @document.subtitle %></small></h2>
        <p><%- @document.mission %>
      </div>
    </div>
    <% if @document.instructions then for inst in @document.instructions: %>
    <div class="item">
      <div class="instruction container">
        <h2><%= inst.title %> <small><%= inst.subtitle %></small></h1>
        <p><%- inst.mission %>
      </div>
    </div>
    <% end %>
  </div>
  <a class="left carousel-control" href="#instructions" style="display:none" data-slide="prev"><span class="glyphicon glyphicon-chevron-left" style="left:5px"></span></a>
  <a class="right carousel-control" href="#instructions" data-slide="next"><span class="glyphicon glyphicon-chevron-right" style="right:5px;left:inherit"></span></a>

<% if @document.instructions: %>
<div id="more" class="btn btn-default topright">More Ideas&nbsp;
<span class="glyphicon glyphicon-circle-arrow-right"></span></div>
<% end %>
</div>

<% if @document.teaser : %>
<xmp id="teaser" class="data"><%- @document.teaser %></xmp>
<% end %>

<xmp id="starter" class="data"><%- @document.code %></xmp>
<xmp id="hint" class="data"><%- @document.hint %></xmp>

<div id="codeframe" class="container-margins" style="flex-grow:1">
</div>

<center class="container-margins reflinks">
<div id="reset" class="btn btn-default pull-left">Reset</div>
<% if not @document.refs: %>
<span class="btn">&nbsp;</span>
<% end %>
<% if @document.refs: %>
<span class="btn"><a target="reference" style="color:inherit;text-decoration:inherit" href="/ref/reference.html">Reference</a>: &nbsp;</span>
<div id="save" class="btn btn-default pull-right"><span class="glyphicon glyphicon-cloud-upload"></span></div>
<% for ref in (@document.refs or []): %>
<a target="reference" class="btn btn-default" href="/ref/<%= ref.replace(/\s/g, '_') %>.html"><%=ref%></a> &nbsp
<% end %>
<% end %>
</center>
</div>

</div> <!-- end flex container -->
<xmp id="setupcode" style="display:none">
# common setup code here.
window.print = ->
  write 'Try using <b>write</b> instead of <b>print</b>.'
# remove default error handling UI.
window.removeEventListener 'error', see
thepopup = null
popup = (t) ->
  if thepopup
    thepopup.html t
    return
  thepopup = write """
    <center>#{t}</center>
  """
  thepopup.css
    background: rgba(240,240,240,0.8)
    fontFamily: 'Arial'
    margin: '5px 15%'
    padding: '8px'
    borderRadius: '8px'
    boxShadow: '0 0 5px dimgray'

hints = null
lasterrorevent = null

$(window).on 'error', (e) ->
  lasterrorevent = e
  if hints then do hints
  if thepopup then return
  advice = '<p>Oops, the computer got confused.'
  msg = e.message || e.originalEvent.message
  if msg
    msg = msg.replace(/^Uncaught [a-z]*Error: /i, '')
    if msg isnt "Cannot read property '0' of null" # CS bug
      advice += '<p>It says: ' + msg
  m = /(\w+) is not defined/.exec(msg)
  if m
    if /^[a-z]{2,}[0-9]+$/i.test(m[1])
      advice += "<p>Is there a missing space in '<b>#{m[1]}</b>'?"
    else if /[A-Z]/.test(m[1]) and m[1].toLowerCase() in [
        'dot', 'pen', 'fd', 'bk', 'lt', 'rt', 'write', 'type', 'menu', 'play',
        'speed', 'ht', 'st', 'cs', 'cg', 'ct', 'fill', 'rgb', 'rgba', 'hsl',
        'hsla', 'red', 'blue', 'black', 'green', 'gray', 'orange', 'purple',
        'pink', 'yellow', 'gold', 'aqua', 'tan', 'white', 'violet', 'snow',
        'true', 'false', 'null', 'for', 'if', 'else', 'do', 'in', 'return']
      advice += "<p>Did you mean '<b>#{m[1].toLowerCase()}</b>' " +
                "instead of '<b>#{m[1]}</b>'?"
    else if m[1].toLowerCase() in ['infinity', 'inf']
      advice += "<p><b>Infinity</b> is spelled out with a capital I."
    else
      if m[1].length > 3
        advice += "<p>Is <b>#{m[1]}</b> spelled right?"
      else
        advice += "<p>Is '<b>#{m[1]} = </b><em>something</em>' " +
                  "needed first?"
      advice += "<p>Or are quotes needed around <b>\"#{m[1]}\"</b>?"
  else if /object is not a function/.test(msg)
    advice += "<p>Is there missing punctuation like a dot?"
  else if /undefined is not a function/.test(msg)
    advice += "<p>Is a command misspelled here?"
  else if /indentation/.test(msg)
    advice += "<p>Is the code lined up neatly?"
    advice += "<p>Or is something unfinished before this?"
  else if /not a function/.test(msg)
    advice += "<p>Is there a missing comma?"
  else if /octal literal/.test(msg)
    advice += "<p>Avoid extra 0 digits before a number."
  else if /unexpected when/.test(msg)
    advice += "<p>Is the 'when' indented correctly?"
  else if /unexpected newline/.test(msg)
    advice += "<p>Is something missing on the previous line?"
  else if /unexpected ,/.test(msg)
    advice += "<p>You might not need a comma here."
  else if /unexpected ->/.test(msg)
    advice += "<p>Is a comma or '=' missing before the arrow?"
  else if /unexpected end of input/.test(msg)
    advice += "<p>Is there some unfinished code around here?"
  else if (m = /unexpected (\S+)/.exec(msg))
    advice += "<p>Is something missing before #{m[1]}?"
  else if /missing ["']/.test(msg) or (
      msg is "Cannot read property '0' of null") # CS bug
    advice += "<p>Is there a string with an unmatched quote?"
    advice += "<p>It might be on an higher line."
  else if /missing [\])}]/.test(msg)
    advice += "<p>It might be missing on an higher line."
  else if (m = /unexpected (\w+)$/.exec(msg))
    advice += "<p>You might try removing '#{m[1]}'"
  popup advice

<%- @content %>
</xmp>
</article>
<script src="//pencilcode.net/lib/pencilcodeembed.js"></script>
<script>

function fixbase() {
  if (!window.$) return; // skip if jquery is undefined.
  if ($('base').length == 0) {
    $(document.head).append('<base>');
  }
  $('base').attr('href', "BASEURL");
}
var fixbasescript =
  fixbase.toString().replace('BASEURL', location.href) + "\nfixbase();";

$('.carousel').carousel();
function updatePagers() {
  var self = $(this);
  self.children('.carousel-control').show();
  if ($('.carousel-inner .item:first').hasClass('active')) {
    self.children('.left.carousel-control').hide();
  }
  if ($('.carousel-inner .item:last').hasClass('active')) {
    self.children('.right.carousel-control').hide();
  }
}
$('#instructions').each(updatePagers).on('slid', '', updatePagers);

function storageName() {
  return 'gym:' + location.pathname;
}

function loadStorage() {
  try {
    return localStorage.getItem(storageName()) || null;
  } catch (e) {
    return null;
  }
}

function saveStorage(c) {
  try {
    if (!c) {
      localStorage.removeItem();
    } else {
      localStorage.setItem(storageName(), c);
    }
  } catch (e) { }
}

var cf = document.getElementById('codeframe'),
    starter = document.getElementById('starter'),
    originalCode = starter.textContent,
    code = loadStorage() || originalCode,
    modified = (code.trim() != originalCode.trim()),
    setup = document.getElementById('setupcode').innerHTML,
    pce = new PencilCodeEmbed(cf);

pce.on('update', function(c) {
  $('#reset').toggleClass('btn-highlight', (c.trim() != originalCode.trim()));
  saveStorage(c);
  updateShareButton(c);
});

pce.beginLoad({code: code, setup: [
  {code: fixbasescript, type: 'text/javascript'},
  {code: setup, type: 'text/coffeescript'}
]});

$('#more').click(function() { $('#instructions').carousel('next'); });
$('#reset').click(function() {
  pce.setCode(originalCode);
});

function doresize() {
  $('#codeframe').height(
    $(window).height() -
    $('#instructions').outerHeight() -
    $('.reflinks').outerHeight());
}

var sharedCode = null;
var sharedUrl = null;

function updateShareButton(c) {
  if ((c == sharedCode) != /ok/.test($('#save span').attr('class'))) {
    $('#save span').attr('class', (c == sharedCode) ?
       'glyphicon glyphicon-ok' : 'glyphicon glyphicon-cloud-upload');
    if (c == sharedCode) {
      $('#save').tooltip({
        title: "View Shared Page",
      });
      $('#save').tooltip('show');
    } else {
      $('#save').tooltip('destroy');
    }
  }
}

$('#save').click(function() {
  var name, prefix, payload, code;
  code = pce.getCode();
  if (code == sharedCode && sharedUrl) {
    window.open(sharedUrl);
    return;
  }
  name = prompt(
    'To share your creation, give it a short name.\n' +
    'It will be posted with everybody else\'s shared ' +
    'projects on gymstage.pencilcode.net.\n' +
    'Make the name distinctive so you can find it.');
  name = name.replace(/\W+/g, '_').replace(/^_+|_+$/g, '');
  if (!name) {
    return;
  }
  prefix = (60466175 -
      (Math.floor((new Date).getTime()/1000) % (24*60*60*500))).toString(36);
  name = prefix + "-" + name;
  payload = {
    data: code,
    key: 943
  }
  $.ajax({
    url: 'http://gymstage.pencilcode.net/save/' + name,
    data: payload,
    dataType: 'json',
    type: 'GET',
    success: function(m) {
      if (m.error) {
        alert('error: ' + m.error);
      } else {
        sharedCode = code;
        sharedUrl ='http://gymstage.pencilcode.net/home/' + name;
        updateShareButton(pce.getCode());
      }
    }
  });
});


doresize();
$(window).resize(doresize);

if (!modified && $('#teaser').length) {
  $(cf).append('<div id="tlayer">' +
    '<iframe class="teaser" id="tframe"></iframe>' +
    '<div title="close the example" data-placement="left" ' +
      'class="closebox glyphicon glyphicon-remove-circle"></div>' +
  '</div>');
  var contents =
    '<!doctype html>\n' +
    '<html><base href="' + location.href + '">\n' +
    '<body><script src="http://pencilcode.net/turtlebits.js" ' +
    'crossorigin="anonymous"><\x2fscript><script type="text/coffeescript">' +
    $(teaser).text() + '<\x2fscript></body></html>';
  $('#tframe')[0].contentWindow.document.write(contents);
  $('#tframe')[0].contentWindow.document.close();
  $('#tlayer .closebox').click(function() {
    $('#tlayer').fadeOut();
  });
  setTimeout(function() {
    if ($('#tlayer').is(':visible')) {
      $('#tlayer .closebox').tooltip('show');
    }
  }, <%- @document.teasersecs || 20 %> * 1000);
}

</script>
